# -*- coding: UTF-8 -*-
#
#    blurb.py
#
import re


class Blurb(object):
    """
    
    The ``Content`` is a wrapper around the filibuster ``BlurbWriter``
    of Erik van Blokland and Jonathan Hoefler. There is supposed to be only one instance of
    the writer installed in the system.
    """
    def __init__(self, content=None):
        import filibuster.content
        print(hasattr(filibuster.content, 'filibusterContent'))
        d = filibuster.content.filibusterContent()
        print('d', d.keys())
        import blurbwriter
        self.writer = blurbwriter.BlurbWriter(d)
    
    reNoTags = re.compile('\<[^\>]*|([^\<\>]*)')

    def getBlurb(self, type, cnt=None, noTags=False):
        u"""
        
        The ``getBlurb`` method answers a random generated blurb of ``type``.
        The full list of available types get be obtained by calling ``self.getContentType()``.
        
        """
        if cnt is not None:
            content = ' '.join(self.writer.write(type).split(' ')[:cnt])
        else:
            content = self.writer.write(type)
        if noTags:
            content = ''.join(self.reNoTags.findall(content))
        return content
   
    def getBlurbTypes(self):
        u"""
        
        The ``getBlurbTypes`` answers a list of names of all types of content blurbs
        that can can be generated by the writer.
        
        """
        return self.writer.keywords
    
if __name__ == '__main__':
    #from filibuster import content
    #print('content', content.content())
    w = Blurb()
    for t in w.getBlurbTypes():
        print(t, w.getBlurb(t))

    print(w.getBlurb('filibuster_about'))
    print(w.getBlurb('aerospace_headline'))
    print(w.getBlurb('address'))
    print
    for i in range(10):
        print(w.getBlurb('politics_euro_headline'))
